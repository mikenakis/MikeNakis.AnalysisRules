<Project>
	<PropertyGroup>
		<MikeNakisCommonFiles>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)../contentFiles/cs/any/MikeNakisCommonFiles/'))</MikeNakisCommonFiles>
	</PropertyGroup>
	<!--PEARL: UseHardlinksIfPossible:True does not work, even when building outside Visual Studio: the file gets
	           copied, not linked, and ErrorIfLinkFails:True has no effect. -->
	<!--PEARL: UseSymboliclinksIfPossible:True does in fact create a symlink, but:
				a) the file becomes writable, even though the file targeted by the symbolic link is not.
				a) the file has no effect. (Apparently the tooling does not respect symlinks.) -->
	<Target Name="CopyEditorConfig" BeforeTargets="BeforeBuild">
		<Copy SourceFiles="$(MikeNakisCommonFiles).editorconfig" DestinationFolder="$(MSBuildProjectDirectory)"
			  SkipUnchangedFiles="True" OverwriteReadOnlyFiles="True" UseSymboliclinksIfPossible="True"
			  ErrorIfLinkFails="True" />
		<!--<MakeFileReadOnly filePath="$(ProjectDir).editorconfig" />-->
	</Target>

	<!-- PEARL: UsingTask ParameterType cannot be an enum! 
	            Ideally, this task would be a general-purpose SetFileAttributes task, but it cannot be, because we
				cannot pass it an enum,	because msbuild uses System.Convert.ChangeType to convert parameter types,
				and this fails on enums. 
				This: https://github.com/dotnet/msbuild/issues/316 indicates that this has been fixed, but it hasn't.
				We could pass a string and parse it in C# code, but it is easier to just narrow the scope of the task to
				only set the ReadOnly attribute. -->
	<UsingTask TaskName="MakeFileReadOnly" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
		<ParameterGroup>
			<filePath ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Code Type="Fragment" Language="cs">
				System.IO.File.SetAttributes( filePath, System.IO.FileAttributes.ReadOnly );
			</Code>
		</Task>
	</UsingTask>
</Project>
