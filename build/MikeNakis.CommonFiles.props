<Project>

	<!-- Get the path to the MikeNakis.CommonFiles project, which may and may not be available.
	     (Typically, it will be available on my local development setup, but not accessible in GitHub actions. -->
	<PropertyGroup>
		<LocalMikeNakisCommonFiles>$([System.IO.Path]::GetFullPath( '$(MSBuildProjectDirectory)\..\..\MikeNakis.CommonFiles' ))</LocalMikeNakisCommonFiles>
	</PropertyGroup>

	<!-- If the MikeNakis.CommonFiles project is available:
	     Set the AbsolutePathToMikeNakisCommonFiles property to point to the files in the local project. -->
	<PropertyGroup Condition="Exists('$(LocalMikeNakisCommonFiles)')" >
		<AbsolutePathToMikeNakisCommonFiles>$(LocalMikeNakisCommonFiles)</AbsolutePathToMikeNakisCommonFiles>
	</PropertyGroup>

	<!-- If the MikeNakis.CommonFiles project is NOT available:
	     Set the AbsolutePathToMikeNakisCommonFiles property to point to the files in the nuget repository. -->
	<PropertyGroup Condition="!Exists('$(LocalMikeNakisCommonFiles)')">
		<AbsolutePathToMikeNakisCommonFiles>$([System.IO.Path]::GetFullPath( '$(MSBuildThisFileDirectory)..\contentFiles\cs\any\MikeNakisCommonFiles' ))</AbsolutePathToMikeNakisCommonFiles>
	</PropertyGroup>

	<!-- Get the relative path to the common files. -->
	<PropertyGroup>
		<MikeNakisCommonFiles>$([MSBuild]::MakeRelative( '$(MSBuildProjectDirectory)', '$(AbsolutePathToMikeNakisCommonFiles)' ))</MikeNakisCommonFiles>
	</PropertyGroup>

	<Target Name="TestTarget" BeforeTargets="BeforeBuild">
		<Message Importance="High" Text="++++++++++++++++++++ $(MSBuildProjectFile): MSBuildProjectDirectory: $(MSBuildProjectDirectory)" />
		<Message Importance="High" Text="++++++++++++++++++++ $(MSBuildProjectFile): LocalMikeNakisCommonFiles: $(LocalMikeNakisCommonFiles)" />
		<Message Importance="High" Text="++++++++++++++++++++ $(MSBuildProjectFile): AbsolutePathToMikeNakisCommonFiles: $(AbsolutePathToMikeNakisCommonFiles)" />
		<Message Importance="High" Text="++++++++++++++++++++ $(MSBuildProjectFile): MikeNakisCommonFiles: $(MikeNakisCommonFiles)" />
	</Target>

	<!--PEARL: UseHardlinksIfPossible:True does not work, even when building outside Visual Studio: the file gets
	           copied, not linked, and ErrorIfLinkFails:True has no effect. -->
	<!--PEARL: UseSymboliclinksIfPossible:True does in fact create a symlink, but the file becomes writable, even though
	           the file targeted by the symbolic link is not. -->
	<Target Name="CopyEditorConfig" BeforeTargets="BeforeBuild">
		<PropertyGroup>
			<Source>$(MikeNakisCommonFiles)\.editorconfig</Source>
			<Destination>$(MSBuildProjectDirectory)\.editorconfig</Destination>
		</PropertyGroup>
		<Message Importance="High" Text="++++++++++++++++++++ $(MSBuildProjectFile): Creating symbolic link '$(Destination)' targeting '$(Source)'" />
		<Error Condition="!Exists('$(Source)')" Text="Source does not exist: '$(Source)'" />
		<!-- PEARL: The following  "Copy" task will cause the project to rebuild on each build, even if
		            "SkipUnchangedFiles" is "True".
					The "Condition:!Exists... OR..." magical incantation is necessary to fix this. -->
		<Copy SourceFiles="$(Source)" DestinationFiles="$(Destination)"
			UseSymboliclinksIfPossible="True" ErrorIfLinkFails="True"
			Condition="!Exists('$(Destination)') OR $([System.IO.File]::GetLastWriteTime('$(Source)').Ticks) &gt; $([System.IO.File]::GetLastWriteTime('$(Destination)').Ticks)" />
		<Error Condition="!Exists('$(Destination)')" Text="Destination does not exist: '$(Destination)'" />
	</Target>

</Project>
